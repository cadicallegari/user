// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cadicallegari/user (interfaces: EventService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	user "github.com/cadicallegari/user"
	gomock "github.com/golang/mock/gomock"
)

// EventService is a mock of EventService interface.
type EventService struct {
	ctrl     *gomock.Controller
	recorder *EventServiceMockRecorder
}

// EventServiceMockRecorder is the mock recorder for EventService.
type EventServiceMockRecorder struct {
	mock *EventService
}

// NewEventService creates a new mock instance.
func NewEventService(ctrl *gomock.Controller) *EventService {
	mock := &EventService{ctrl: ctrl}
	mock.recorder = &EventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EventService) EXPECT() *EventServiceMockRecorder {
	return m.recorder
}

// UserCreated mocks base method.
func (m *EventService) UserCreated(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreated indicates an expected call of UserCreated.
func (mr *EventServiceMockRecorder) UserCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreated", reflect.TypeOf((*EventService)(nil).UserCreated), arg0, arg1)
}

// UserDeleted mocks base method.
func (m *EventService) UserDeleted(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleted", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleted indicates an expected call of UserDeleted.
func (mr *EventServiceMockRecorder) UserDeleted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleted", reflect.TypeOf((*EventService)(nil).UserDeleted), arg0, arg1)
}

// UserUpdated mocks base method.
func (m *EventService) UserUpdated(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdated indicates an expected call of UserUpdated.
func (mr *EventServiceMockRecorder) UserUpdated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdated", reflect.TypeOf((*EventService)(nil).UserUpdated), arg0, arg1)
}
